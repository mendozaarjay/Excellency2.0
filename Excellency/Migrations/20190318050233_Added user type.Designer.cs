// <auto-generated />
using System;
using Excellency.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Excellency.Migrations
{
    [DbContext(typeof(EASDbContext))]
    [Migration("20190318050233_Added user type")]
    partial class Addedusertype
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Excellency.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchId");

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("EmployeeNo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsChangedPassword");

                    b.Property<bool>("IsDeactivated");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExpired");

                    b.Property<bool>("IsLocked");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Mobile")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<int?>("PositionId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Excellency.Models.AccountRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("Excellency.Models.AccountRoleAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoleAssignments");
                });

            modelBuilder.Entity("Excellency.Models.ApprovalLevelAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("FirstApprovalId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsWithSecondApproval");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("SecondApprovalId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FirstApprovalId");

                    b.HasIndex("SecondApprovalId");

                    b.ToTable("ApprovalLevelAssignment");
                });

            modelBuilder.Entity("Excellency.Models.ApproverAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApproverId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("UserId");

                    b.ToTable("ApproverAssignments");
                });

            modelBuilder.Entity("Excellency.Models.BehavioralFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("BehavioralFactors");
                });

            modelBuilder.Entity("Excellency.Models.BehavioralFactorItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BehavioralFactorId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("BehavioralFactorId");

                    b.ToTable("BehavioralFactorItems");
                });

            modelBuilder.Entity("Excellency.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Excellency.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("SuccessIndicatorId");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("SuccessIndicatorId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Excellency.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(500);

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Excellency.Models.Criteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("Criterias");
                });

            modelBuilder.Entity("Excellency.Models.CriteriaEvaluationHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CriteriaId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("PeriodId");

                    b.Property<int?>("RateeId");

                    b.Property<int?>("RaterId");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RateeId");

                    b.HasIndex("RaterId");

                    b.HasIndex("StatusId");

                    b.ToTable("CriteriaEvaluationHeaders");
                });

            modelBuilder.Entity("Excellency.Models.CriteriaEvaluationLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int?>("CriteriaLineId");

                    b.Property<int?>("HeaderId");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaLineId");

                    b.HasIndex("HeaderId");

                    b.ToTable("CriteriaEvaluationLines");
                });

            modelBuilder.Entity("Excellency.Models.CriteriaHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Title");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.ToTable("CriteriaHeaders");
                });

            modelBuilder.Entity("Excellency.Models.CriteriaLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CriteriaHeaderId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Title");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaHeaderId");

                    b.ToTable("CriteriaLines");
                });

            modelBuilder.Entity("Excellency.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeAssignments");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeBehavioralAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BehavioralFactorId");

                    b.Property<int?>("EmployeeAssignmentId");

                    b.Property<int?>("EvaluationSeasonId");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("BehavioralFactorId");

                    b.HasIndex("EmployeeAssignmentId");

                    b.HasIndex("EvaluationSeasonId");

                    b.ToTable("EmployeeBehavioralAssignments");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("EmployeeCategories");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeCriteriaAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("CriteriaId");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("PeriodId");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PeriodId");

                    b.ToTable("EmployeeCriteriaAssignments");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeKRAAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeAssignmentId");

                    b.Property<int?>("EvaluationSeasonId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("KeyResultAreaId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeAssignmentId");

                    b.HasIndex("EvaluationSeasonId");

                    b.HasIndex("KeyResultAreaId");

                    b.ToTable("EmployeeKRAAssignments");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeRaterHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("RaterId");

                    b.HasKey("Id");

                    b.HasIndex("RaterId");

                    b.ToTable("RaterHeader");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeRaterLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("EmployeeRaterId");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeRaterId");

                    b.ToTable("RaterLine");
                });

            modelBuilder.Entity("Excellency.Models.EvaluationHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovedDate");

                    b.Property<int?>("ApproverId");

                    b.Property<string>("ApproverRemarks");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("KeyResultAreaId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<DateTime>("PostedDate");

                    b.Property<int?>("RateeId");

                    b.Property<int?>("RaterId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("KeyResultAreaId");

                    b.HasIndex("RateeId");

                    b.HasIndex("RaterId");

                    b.HasIndex("StatusId");

                    b.ToTable("EvaluationHeader");
                });

            modelBuilder.Entity("Excellency.Models.EvaluationLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int?>("EvaluationHeaderId");

                    b.Property<int?>("RatingTableItemId");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("SuccessIndicatorId");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationHeaderId");

                    b.HasIndex("RatingTableItemId");

                    b.HasIndex("SuccessIndicatorId");

                    b.ToTable("EvaluationLine");
                });

            modelBuilder.Entity("Excellency.Models.EvaluationSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("EvaluationSeasons");
                });

            modelBuilder.Entity("Excellency.Models.EvaluationSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsOpen");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("Title");

                    b.Property<int>("YearCovered");

                    b.HasKey("Id");

                    b.ToTable("EvaluationSettings");
                });

            modelBuilder.Entity("Excellency.Models.Interpretation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<decimal>("ScoreFrom")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("ScoreTo")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Interpretations");
                });

            modelBuilder.Entity("Excellency.Models.KeyResultArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("KeyResultAreas");
                });

            modelBuilder.Entity("Excellency.Models.KeySuccessIndicator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("KeyResultAreaId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("RatingTableId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("KeyResultAreaId");

                    b.HasIndex("RatingTableId");

                    b.ToTable("KeySuccessIndicators");
                });

            modelBuilder.Entity("Excellency.Models.Module", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Excellency.Models.PeerAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExpired");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("RateeId");

                    b.Property<int?>("RaterId");

                    b.HasKey("Id");

                    b.HasIndex("RateeId");

                    b.HasIndex("RaterId");

                    b.ToTable("PeerAssignment");
                });

            modelBuilder.Entity("Excellency.Models.PeerCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Title");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("PeerCriterias");
                });

            modelBuilder.Entity("Excellency.Models.PeerCriteriaLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int?>("HeaderId");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.ToTable("PeerCriteriaLine");
                });

            modelBuilder.Entity("Excellency.Models.PeerEvaluationHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("EvaluationSeasonId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExpired");

                    b.Property<int?>("StatusId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EvaluationSeasonId");

                    b.HasIndex("StatusId");

                    b.ToTable("PeerEvaluationHeader");
                });

            modelBuilder.Entity("Excellency.Models.PeerEvaluationLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int?>("PeerCriteriaId");

                    b.Property<int?>("PeerEvaluationHeaderId");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.HasIndex("PeerCriteriaId");

                    b.HasIndex("PeerEvaluationHeaderId");

                    b.ToTable("PeerEvaluationLine");
                });

            modelBuilder.Entity("Excellency.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("UserLevelId");

                    b.HasKey("Id");

                    b.HasIndex("UserLevelId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Excellency.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Excellency.Models.RatingBehavioralFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BehavioralFactorId");

                    b.Property<int?>("BehavioralFactorItemId");

                    b.Property<string>("Comment");

                    b.Property<int?>("RatingHeaderId");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.HasIndex("BehavioralFactorId");

                    b.HasIndex("BehavioralFactorItemId");

                    b.HasIndex("RatingHeaderId");

                    b.ToTable("RatingBehavioralFactors");
                });

            modelBuilder.Entity("Excellency.Models.RatingHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("EvaluationSeasonId");

                    b.Property<DateTime>("FirstApprovalDate");

                    b.Property<int?>("FirstApproverId");

                    b.Property<string>("FirstApproverRemarks");

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExpired");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<DateTime>("PostedDate");

                    b.Property<int?>("RateeId");

                    b.Property<int?>("RaterId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(500);

                    b.Property<DateTime>("SecondApprovalDate");

                    b.Property<int?>("SecondApproverId");

                    b.Property<string>("SecondApproverRemarks");

                    b.Property<int?>("StatusId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("EvaluationSeasonId");

                    b.HasIndex("FirstApproverId");

                    b.HasIndex("RateeId");

                    b.HasIndex("RaterId");

                    b.HasIndex("SecondApproverId");

                    b.HasIndex("StatusId");

                    b.ToTable("RatingHeader");
                });

            modelBuilder.Entity("Excellency.Models.RatingKeySuccessArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int?>("KeyResultAreaId");

                    b.Property<int?>("KeySuccessIndicatorId");

                    b.Property<int?>("RatingHeaderId");

                    b.Property<int>("Score");

                    b.HasKey("Id");

                    b.HasIndex("KeyResultAreaId");

                    b.HasIndex("KeySuccessIndicatorId");

                    b.HasIndex("RatingHeaderId");

                    b.ToTable("RatingKeySuccessAreas");
                });

            modelBuilder.Entity("Excellency.Models.RatingTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("RatingTables");
                });

            modelBuilder.Entity("Excellency.Models.RatingTableItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("RatingTableId");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("RatingTableId");

                    b.ToTable("RatingTableItems");
                });

            modelBuilder.Entity("Excellency.Models.Recommendation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("EvaluationSeasonId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsExpired");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EvaluationSeasonId");

                    b.ToTable("Recommendations");
                });

            modelBuilder.Entity("Excellency.Models.RecommendationAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("RecommenderId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RecommenderId");

                    b.ToTable("RecommendationAssignments");
                });

            modelBuilder.Entity("Excellency.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsUser");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("Excellency.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Excellency.Models.UserAccessType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int?>("UserTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("UserAccessTypes");
                });

            modelBuilder.Entity("Excellency.Models.UserLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Level");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("UserLevels");
                });

            modelBuilder.Entity("Excellency.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Excellency.Models.Account", b =>
                {
                    b.HasOne("Excellency.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Excellency.Models.EmployeeCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Excellency.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.HasOne("Excellency.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("Excellency.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("Excellency.Models.AccountRoleAssignment", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Excellency.Models.AccountRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("Excellency.Models.ApprovalLevelAssignment", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Excellency.Models.Account", "FirstApproval")
                        .WithMany()
                        .HasForeignKey("FirstApprovalId");

                    b.HasOne("Excellency.Models.Account", "SecondApproval")
                        .WithMany()
                        .HasForeignKey("SecondApprovalId");
                });

            modelBuilder.Entity("Excellency.Models.ApproverAssignment", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("Excellency.Models.Account", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Excellency.Models.BehavioralFactor", b =>
                {
                    b.HasOne("Excellency.Models.EmployeeCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("Excellency.Models.BehavioralFactorItem", b =>
                {
                    b.HasOne("Excellency.Models.BehavioralFactor", "BehavioralFactor")
                        .WithMany()
                        .HasForeignKey("BehavioralFactorId");
                });

            modelBuilder.Entity("Excellency.Models.Branch", b =>
                {
                    b.HasOne("Excellency.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("Excellency.Models.Category", b =>
                {
                    b.HasOne("Excellency.Models.KeySuccessIndicator", "SuccessIndicator")
                        .WithMany()
                        .HasForeignKey("SuccessIndicatorId");
                });

            modelBuilder.Entity("Excellency.Models.CriteriaEvaluationHeader", b =>
                {
                    b.HasOne("Excellency.Models.CriteriaHeader", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId");

                    b.HasOne("Excellency.Models.EvaluationSeason", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");

                    b.HasOne("Excellency.Models.Account", "Ratee")
                        .WithMany()
                        .HasForeignKey("RateeId");

                    b.HasOne("Excellency.Models.Account", "Rater")
                        .WithMany()
                        .HasForeignKey("RaterId");

                    b.HasOne("Excellency.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Excellency.Models.CriteriaEvaluationLine", b =>
                {
                    b.HasOne("Excellency.Models.CriteriaLine", "CriteriaLine")
                        .WithMany()
                        .HasForeignKey("CriteriaLineId");

                    b.HasOne("Excellency.Models.CriteriaEvaluationHeader", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId");
                });

            modelBuilder.Entity("Excellency.Models.CriteriaLine", b =>
                {
                    b.HasOne("Excellency.Models.CriteriaHeader", "CriteriaHeader")
                        .WithMany()
                        .HasForeignKey("CriteriaHeaderId");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeAssignment", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeBehavioralAssignment", b =>
                {
                    b.HasOne("Excellency.Models.BehavioralFactor", "BehavioralFactor")
                        .WithMany()
                        .HasForeignKey("BehavioralFactorId");

                    b.HasOne("Excellency.Models.EmployeeAssignment", "EmployeeAssignment")
                        .WithMany()
                        .HasForeignKey("EmployeeAssignmentId");

                    b.HasOne("Excellency.Models.EvaluationSeason", "EvaluationSeason")
                        .WithMany()
                        .HasForeignKey("EvaluationSeasonId");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeCriteriaAssignment", b =>
                {
                    b.HasOne("Excellency.Models.CriteriaHeader", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId");

                    b.HasOne("Excellency.Models.Account", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Excellency.Models.EvaluationSeason", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeKRAAssignment", b =>
                {
                    b.HasOne("Excellency.Models.EmployeeAssignment", "EmployeeAssignment")
                        .WithMany()
                        .HasForeignKey("EmployeeAssignmentId");

                    b.HasOne("Excellency.Models.EvaluationSeason", "EvaluationSeason")
                        .WithMany()
                        .HasForeignKey("EvaluationSeasonId");

                    b.HasOne("Excellency.Models.KeyResultArea", "KeyResultArea")
                        .WithMany()
                        .HasForeignKey("KeyResultAreaId");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeRaterHeader", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Rater")
                        .WithMany()
                        .HasForeignKey("RaterId");
                });

            modelBuilder.Entity("Excellency.Models.EmployeeRaterLine", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Excellency.Models.EmployeeRaterHeader", "EmployeeRater")
                        .WithMany()
                        .HasForeignKey("EmployeeRaterId");
                });

            modelBuilder.Entity("Excellency.Models.EvaluationHeader", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId");

                    b.HasOne("Excellency.Models.KeyResultArea", "KeyResultArea")
                        .WithMany()
                        .HasForeignKey("KeyResultAreaId");

                    b.HasOne("Excellency.Models.Account", "Ratee")
                        .WithMany()
                        .HasForeignKey("RateeId");

                    b.HasOne("Excellency.Models.Account", "Rater")
                        .WithMany()
                        .HasForeignKey("RaterId");

                    b.HasOne("Excellency.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Excellency.Models.EvaluationLine", b =>
                {
                    b.HasOne("Excellency.Models.EvaluationHeader", "EvaluationHeader")
                        .WithMany()
                        .HasForeignKey("EvaluationHeaderId");

                    b.HasOne("Excellency.Models.RatingTableItem", "RatingTableItem")
                        .WithMany()
                        .HasForeignKey("RatingTableItemId");

                    b.HasOne("Excellency.Models.KeySuccessIndicator", "SuccessIndicator")
                        .WithMany()
                        .HasForeignKey("SuccessIndicatorId");
                });

            modelBuilder.Entity("Excellency.Models.KeySuccessIndicator", b =>
                {
                    b.HasOne("Excellency.Models.KeyResultArea", "KeyResultArea")
                        .WithMany()
                        .HasForeignKey("KeyResultAreaId");

                    b.HasOne("Excellency.Models.RatingTable", "RatingTable")
                        .WithMany()
                        .HasForeignKey("RatingTableId");
                });

            modelBuilder.Entity("Excellency.Models.PeerAssignment", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Ratee")
                        .WithMany()
                        .HasForeignKey("RateeId");

                    b.HasOne("Excellency.Models.Account", "Rater")
                        .WithMany()
                        .HasForeignKey("RaterId");
                });

            modelBuilder.Entity("Excellency.Models.PeerCriteriaLine", b =>
                {
                    b.HasOne("Excellency.Models.PeerCriteria", "Header")
                        .WithMany()
                        .HasForeignKey("HeaderId");
                });

            modelBuilder.Entity("Excellency.Models.PeerEvaluationHeader", b =>
                {
                    b.HasOne("Excellency.Models.Account", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Excellency.Models.Account", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Excellency.Models.EvaluationSeason", "EvaluationSeason")
                        .WithMany()
                        .HasForeignKey("EvaluationSeasonId");

                    b.HasOne("Excellency.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Excellency.Models.PeerEvaluationLine", b =>
                {
                    b.HasOne("Excellency.Models.PeerCriteria", "PeerCriteria")
                        .WithMany()
                        .HasForeignKey("PeerCriteriaId");

                    b.HasOne("Excellency.Models.PeerEvaluationHeader", "PeerEvaluationHeader")
                        .WithMany()
                        .HasForeignKey("PeerEvaluationHeaderId");
                });

            modelBuilder.Entity("Excellency.Models.Position", b =>
                {
                    b.HasOne("Excellency.Models.UserLevel", "UserLevel")
                        .WithMany()
                        .HasForeignKey("UserLevelId");
                });

            modelBuilder.Entity("Excellency.Models.RatingBehavioralFactor", b =>
                {
                    b.HasOne("Excellency.Models.BehavioralFactor", "BehavioralFactor")
                        .WithMany()
                        .HasForeignKey("BehavioralFactorId");

                    b.HasOne("Excellency.Models.BehavioralFactorItem", "BehavioralFactorItem")
                        .WithMany()
                        .HasForeignKey("BehavioralFactorItemId");

                    b.HasOne("Excellency.Models.RatingHeader", "RatingHeader")
                        .WithMany()
                        .HasForeignKey("RatingHeaderId");
                });

            modelBuilder.Entity("Excellency.Models.RatingHeader", b =>
                {
                    b.HasOne("Excellency.Models.EvaluationSeason", "EvaluationSeason")
                        .WithMany()
                        .HasForeignKey("EvaluationSeasonId");

                    b.HasOne("Excellency.Models.Account", "FirstApprover")
                        .WithMany()
                        .HasForeignKey("FirstApproverId");

                    b.HasOne("Excellency.Models.Account", "Ratee")
                        .WithMany()
                        .HasForeignKey("RateeId");

                    b.HasOne("Excellency.Models.Account", "Rater")
                        .WithMany()
                        .HasForeignKey("RaterId");

                    b.HasOne("Excellency.Models.Account", "SecondApprover")
                        .WithMany()
                        .HasForeignKey("SecondApproverId");

                    b.HasOne("Excellency.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("Excellency.Models.RatingKeySuccessArea", b =>
                {
                    b.HasOne("Excellency.Models.KeyResultArea", "KeyResultArea")
                        .WithMany()
                        .HasForeignKey("KeyResultAreaId");

                    b.HasOne("Excellency.Models.KeySuccessIndicator", "KeySuccessIndicator")
                        .WithMany()
                        .HasForeignKey("KeySuccessIndicatorId");

                    b.HasOne("Excellency.Models.RatingHeader", "RatingHeader")
                        .WithMany()
                        .HasForeignKey("RatingHeaderId");
                });

            modelBuilder.Entity("Excellency.Models.RatingTableItem", b =>
                {
                    b.HasOne("Excellency.Models.RatingTable", "RatingTable")
                        .WithMany()
                        .HasForeignKey("RatingTableId");
                });

            modelBuilder.Entity("Excellency.Models.Recommendation", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Excellency.Models.EvaluationSeason", "EvaluationSeason")
                        .WithMany()
                        .HasForeignKey("EvaluationSeasonId");
                });

            modelBuilder.Entity("Excellency.Models.RecommendationAssignment", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Excellency.Models.Account", "Recommender")
                        .WithMany()
                        .HasForeignKey("RecommenderId");
                });

            modelBuilder.Entity("Excellency.Models.Registration", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Excellency.Models.Account", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Excellency.Models.UserAccessType", b =>
                {
                    b.HasOne("Excellency.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Excellency.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
